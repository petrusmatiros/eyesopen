name: Build and deploy to production

on:
  workflow_dispatch:

# env:
#   APP_NAME: my-app  # Change per repo or override in GitHub Variables

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üì¶ Checkout source
        uses: actions/checkout@v4

      - name: üîç Debug ENV vars
        run: |
          echo "APP_NAME=${APP_NAME}"
          echo "SHA=${{ steps.sha.outputs.sha_short }}"

      - name: üî® Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üè∑Ô∏è Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üê≥ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ${{ env.APP_NAME }}:latest
            ${{ env.APP_NAME }}:${{ steps.sha.outputs.sha_short }}
          load: true

      - name: üßä Save image to unique tarball
        run: |
          export IMAGE_FILE=image-${{ env.APP_NAME }}-${{ steps.sha.outputs.sha_short }}.tar
          echo "IMAGE_FILE=$IMAGE_FILE" >> $GITHUB_ENV
          docker save $APP_NAME:${{ steps.sha.outputs.sha_short }} -o $IMAGE_FILE

      - name: üì§ Upload image to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          source: ${{ env.IMAGE_FILE }}
          target: /tmp/

      - name: üöÄ Deploy container on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            set -e
            APP_NAME=${{ env.APP_NAME }}
            IMAGE_TAG=${{ steps.sha.outputs.sha_short }}
            IMAGE_FILE=image-${APP_NAME}-${IMAGE_TAG}.tar

            echo "[+] Loading Docker image..."
            docker load -i /tmp/$IMAGE_FILE

            echo "[+] Stopping old container..."
            docker rm -f $APP_NAME || true

            echo "[+] Running new container..."
            docker run -d --name $APP_NAME \
              -e NODE_ENV=${{ secrets.NODE_ENV }} \
              -e PORT=${{ secrets.PORT }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -p 127.0.0.1:8080:3000 \
              $APP_NAME:$IMAGE_TAG || (docker logs $APP_NAME && exit 1)

            echo "[+] Cleaning up image..."
            rm -f /tmp/$IMAGE_FILE
            docker image prune -f

      - name: üßπ Clean up runner
        run: |
          docker rmi $APP_NAME:${{ steps.sha.outputs.sha_short }} || true
          docker rmi $APP_NAME:latest || true
          docker system prune -f
          docker volume prune -f

      - name: ‚úÖ Notify success
        if: success()
        run: echo "‚úÖ Deployment of $APP_NAME succeeded!"

      - name: ‚ùå Notify failure
        if: failure()
        run: echo "‚ùå Deployment of $APP_NAME failed!"
